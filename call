// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity >= 0.5.0 < 0.9.0;

/* 
call: 로우레벨 함수
1.송금
2.외부 스마트컨트랙 함수 부르기
3.가변적인 gas
4.Check_Effects_Interactions_pattern 사용
*/

contract add{
    event JustFallback(string _str);
    event JustReceive(string _str);

    function addNumber(uint256 _num1, uint256 _num2) public pure returns(uint256){
        return _num1 + _num2;
    }

    fallback() external{
        emit JustFallback("JustFallBack is called");
    }

    receive() external payable{
        emit JustReceive("JustReceive is called");
    }
}

contract caller{
    event calledFunction(bool _success, bytes _output);
    //송금하기
    function transferEther(address payable _to) public payable{
        (bool success, ) = _to.call{value: msg.value}("");
        require(success, "Failed to transfer ether");
    }

    //외부 스마트컨트랙 함수 부르기
    function callMethod(address _contractAddr, uint256 _num1, uint256 _num2) public {
        (bool success, bytes memory outputFromCalledFunction) = _contractAddr.call(
            abi.encodeWithSignature("addNumber(uint256,uint256)", _num1, _num2)
        );
        require(success, "Filed to transfer ether");
        emit calledFunction(success, outputFromCalledFunction);
    }
}
