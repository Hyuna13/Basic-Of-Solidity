// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity >= 0.5.0 < 0.9.0;

/*
1. 1 이더만 내야한다.
2. 중복해서 참여불가(누군가 받으면 초기화)
3. 관리자만 적립된 이더를 볼수있다.
4. 3의 배수 번째 사람에게 적립된 이더를 준다.
*/

contract MoneyBox {

    event WhoPaid(address indexed sender, uint256 payment);

    address owner;

    mapping(uint256 => mapping(address => bool)) paidMemberList;

    uint256 round = 1;
    constructor() {
        owner = msg.sender;
    }

    receive() external payable {
        require(msg.value == 1 ether, "Must be 1 ether");
        require(paidMemberList[round][msg.sender] == false, "Must be a new player");

        paidMemberList[round][msg.sender] = true;

        emit WhoPaid(msg.sender, msg.value);

        if (address(this).balance == 3 ether){
            (bool sent, )=payable(msg.sender).call{value:address(this).balance}("");
            require(sent, "Failed to pay");
            round++;
        }
    }
    
    //round 체크
    function checkRound() public view returns(uint256) {
        return round;
    }
    
    //오직 관리자만이 적립된 이더 체크 가능
    function checkValue() public view returns(uint256) {
        require(owner == msg.sender, "Only owner can check the value");
        return address(this).balance; //this = moneybox => 주소타입으로 변경
    }
}
