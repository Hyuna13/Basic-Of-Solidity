// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity >= 0.7.0 < 0.9.0;

//상속
contract Father {
    string public familyName = "Swift";
    string public givenName = "Taylor";
    uint256 public money = 100;

    constructor(string memory _givenName) public {
        givenName = _givenName;
    }

    function getFamilyName() view public returns(string memory){
        return familyName;
    }

    function getGivenName() view public returns(string memory){
        return givenName;
    }

    function getMoney() view public virtual returns(uint256){
        return money;
    }
}

//overriding
contract Daughter is Father("Kaya"){
    uint256 public earning = 0;

    function work() public{
        earning += 100;
    }

    function getMoney() view public override returns(uint256){
        return money+earning;
    }
}


//두개이상 상속

contract Father{
    uint256 public fatherMoney = 100;

    function getFatherName() public pure returns(string memory){
        return "Jake Swift";
    }

    function getMoney() public view virtual returns(uint256){
        return fatherMoney;
    }
}

contract Mother{
    uint256 public motherMoney = 200;

    function getMotherName() public pure returns(string memory){
        return "Alex Gomez";
    }

    function getMoney() public view virtual returns(uint256){
        return motherMoney;
    }
}

contract Daughter is Father, Mother{
    function getMoney() public view override(Father, Mother) returns(uint256){
        return fatherMoney+motherMoney;
    }
}


//super
//상속 순서 = 맨 오른쪽이 최신

contract Father {
    event FatherName(string name);
    function who() public virtual {
        emit FatherName("Jake Swift");
    }
}

contract Mother {
    event MotherName(string name);
    function who() public virtual {
        emit MotherName("Alex Gomez");
    }
}

contract Daughter is Father, Mother {
    function who() public override(Father, Mother){
        super.who();
    }
}
